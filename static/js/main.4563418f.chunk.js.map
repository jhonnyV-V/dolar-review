{"version":3,"sources":["AppContext.js","Components/Header/Header.jsx","services/externalApi.js","App.jsx","serviceWorkerRegistration.js","index.js"],"names":["AppContext","createContext","ContextProvider","Provider","useStyles","makeStyles","theme","root","flexGrow","width","menuButton","marginRight","spacing","title","color","link","textDecoration","marginLeft","cursor","fontSize","linkUnderline","ButtonAppBar","classes","history","useHistory","useState","location","pathname","actualRoute","setActualRoute","className","AppBar","position","Toolbar","toolbar","Grid","container","justify","item","xs","sm","md","lg","Typography","variant","name","map","page","onClick","e","event","preventDefault","push","externalApi","axios","create","baseURL","process","Display","lazy","Calculator","padding","App","sources","data","setData","rows","setRows","loadContent","a","get","quotes","row","forEach","source","index","id","price","quote","last_update","last_retrieved","sort","b","Date","console","log","useEffect","Container","value","exact","path","fallback","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","responsiveFontSizes","createMuiTheme","palette","type","primary","main","secondary","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4563418f.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst AppContext = createContext(null);\r\n\r\nexport default AppContext\r\n\r\nexport const ContextProvider = AppContext.Provider","import { useState } from 'react';\r\nimport { AppBar, Toolbar, Typography, Grid, makeStyles } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width:'100vw',\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        color:'#28a745',\r\n    },\r\n\r\n    link:{\r\n        color: '#28a745',\r\n        textDecoration: 'none',\r\n        marginRight: theme.spacing(1),\r\n        marginLeft: theme.spacing(1),\r\n        cursor: 'pointer',\r\n        '@media screen and (min-width: 400px)':{\r\n            fontSize: '1.25rem',\r\n        },\r\n    },\r\n    linkUnderline: {\r\n        textDecoration: 'underline',\r\n    },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [actualRoute,setActualRoute] = useState(history.location.pathname)\r\n    const routes = [\r\n        {\r\n            link: '/dolar-review/',\r\n            name: 'Home',\r\n        },\r\n        {\r\n            link: '/dolar-review/calculator',\r\n            name: 'Calculadora',\r\n        }\r\n    ];\r\n    const preventDefault = (event, link) => {\r\n        event.preventDefault();\r\n        setActualRoute(link)\r\n        history.push(link)\r\n    }\r\n\r\n    return (\r\n    <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n            <Toolbar className={classes.toolbar}>\r\n                <Grid container justify='flex-start' item xs={6} sm={5} md={3} lg={2} >\r\n                <Typography variant=\"h6\" className={classes.title} >\r\n                    Dolar Review\r\n                </Typography>\r\n                </Grid>\r\n                <Grid container justify='flex-start' item xs={6} sm={3}> \r\n                    { routes.map((page) => (\r\n                                <Typography key={page.name} \r\n                                className={`${classes.link} ${\r\n                                    actualRoute == page.link? \r\n                                        classes.linkUnderline\r\n                                    : \r\n                                    ''\r\n                                }`}\r\n                                onClick={(e) => preventDefault(e,page.link)}\r\n                                > \r\n                                    {page.name} \r\n                                </Typography>\r\n                            )\r\n                        )\r\n                    } \r\n                </Grid>\r\n            </Toolbar>\r\n        </AppBar>\r\n    </div>\r\n    );\r\n}\r\n","import axios from 'axios';\r\nconst externalApi = axios.create({\r\n    baseURL: process.env.REACT_APP_EXTERNAL_API\r\n});\r\n\r\n\r\nexport default externalApi;\r\n","import React, { lazy, Suspense, useState, useContext, useEffect } from \"react\";\r\nimport { Container, makeStyles } from '@material-ui/core'\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport Header from './Components/Header/'\r\nimport { ContextProvider } from './AppContext';\r\nimport externalApi from './services/externalApi';\r\nimport './App.css';\r\n\r\nconst Display = lazy(() => import('./Components/Display/'));\r\nconst Calculator = lazy(() => import('./Components/Calculator/'));\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    padding: 50,\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles()\r\n  const [data, setData] = useState({sources:[]});\r\n  const [rows, setRows] = useState([]);\r\n\r\n  const loadContent = async () => {\r\n    const quotes = await externalApi.get();\r\n    setData(quotes.data);\r\n    let row = []\r\n    quotes.data.sources.forEach((source, index) =>{\r\n        row.push({\r\n            id: index,\r\n            name: source.name,\r\n            price: source.quote,\r\n            last_update: source.last_retrieved\r\n        });\r\n    });\r\n    row.sort((a,b) => new Date(b.last_update) - new Date(a.last_update) )\r\n    setRows(row)\r\n    console.log(quotes.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    //the API is not mine, if you want to check the source is\r\n    //https://api.exchangedyn.com/free/quotes/usdves\r\n    loadContent();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <BrowserRouter>\r\n        <Header/>\r\n        <div className={classes.root}>\r\n          <Container>\r\n            <div>\r\n              <ContextProvider value={{rows, data}}>\r\n\r\n                <Route exact path=\"/dolar-review/\">\r\n                  <Suspense fallback={<div>Loading...</div>}>\r\n                    <Display/>\r\n                  </Suspense>\r\n                </Route>\r\n\r\n                <Route exact path=\"/dolar-review/calculator\">\r\n                  <Suspense fallback={<div>Loading...</div>}>\r\n                    <Calculator/>\r\n                  </Suspense>\r\n                </Route>\r\n\r\n              </ContextProvider>\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorkerRegistration';\r\nimport { createMuiTheme, ThemeProvider, responsiveFontSizes, CssBaseline } from '@material-ui/core';\r\n\r\nconst theme = responsiveFontSizes(\r\n    createMuiTheme({\r\n        palette: {\r\n            type:'dark',\r\n            primary: {\r\n                main:\"#1c1c1c\"\r\n            },\r\n            secondary:{\r\n                main:\"#fff\"\r\n            },\r\n        },\r\n    })\r\n)\r\n\r\nReactDOM.render(<ThemeProvider theme={theme} >\r\n                    <CssBaseline/>\r\n                    <App/>\r\n                </ThemeProvider> , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();"],"sourceRoot":""}