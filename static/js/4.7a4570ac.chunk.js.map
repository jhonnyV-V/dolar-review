{"version":3,"sources":["Components/Const.js","Components/Calculator/CalculatePrice.jsx","Components/Calculator/Calculator.jsx"],"names":["months","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","formatDate","date","splitDate","split","toLowerCase","getBrowserLocale","navigator","language","vesFormatter","Intl","NumberFormat","style","currency","usdFormatter","formatNumber","number","isNaN","format","useStyles","makeStyles","theme","formControl","margin","spacing","marginTop","minWidth","selectEmpty","amount","fontSize","fontWeight","color","overflow","CalculatePrice","calculate","options","classes","useState","provider","setProvider","setAmount","Grid","container","item","xs","sm","FormControl","className","NativeSelect","defaultValue","name","onChange","event","target","value","inputProps","map","FormHelperText","TextField","variant","placeholder","textField","justify","Typography","marginBottom","Calculator","useContext","AppContext","rows","Promedio","data","average","forEach","price","Object","keys","selection","optionObject"],"mappings":"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","file":"static/js/4.7a4570ac.chunk.js","sourcesContent":["const months = {\r\n    jan: '01',\r\n    feb:'02',\r\n    mar:'03',\r\n    apr:'04',\r\n    may:'05',\r\n    jun:'06',\r\n    jul:'07',\r\n    aug:'08',\r\n    sep:'09',\r\n    oct:'10',\r\n    nov:'11',\r\n    dec:'12',\r\n}\r\n// take as an imput  the result of new Date() and returns a formated date\r\n// example: formatDate('Fri Mar 19 2021') and returns '2021/03/19'\r\nexport function formatDate(date){\r\n    let splitDate = `${date}`.split(' ')\r\n    let formatedDate = `${splitDate[3]}-${months[splitDate[1].toLowerCase()]}-${splitDate[2]}`\r\n    return formatedDate\r\n\r\n}\r\n//takes as input this three parameters as integers and return\r\n//the date in miliseconds from epox\r\nexport function getDate(year, month, day){\r\n    let date = Date.UTC(year,month -1, day +1)\r\n    return date\r\n}\r\n\r\nexport const getBrowserLocale = () => navigator.language || 'en-US';\r\nconst vesFormatter =  new Intl.NumberFormat(getBrowserLocale(), { style: 'currency', currency: 'VES'})\r\nconst usdFormatter =  new Intl.NumberFormat(getBrowserLocale(), { style: 'currency', currency: 'USD'})\r\n\r\nexport function formatNumber(number, currency){\r\n    if(isNaN(number)){\r\n        return 0\r\n    }\r\n    if(!currency || currency === 'VES'){\r\n        return vesFormatter.format(number)\r\n    }\r\n\r\n    return usdFormatter.format(number)\r\n\r\n}\r\n","import { useState } from 'react';\r\nimport { \r\n    Paper, \r\n    Grid, \r\n    Typography,\r\n    makeStyles,\r\n    FormControl,\r\n    NativeSelect,\r\n    FormHelperText,\r\n    TextField,\r\n} from '@material-ui/core';\r\n\r\nimport { getBrowserLocale } from '../Const';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    marginTop: 0,\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  amount:{\r\n    marginTop: '32px',\r\n    fontSize: '1.4rem',\r\n    fontWeight: 'bold',\r\n    color: '#28a745',\r\n    overflow: 'scroll',\r\n    '@media (min-width: 600px)':{\r\n        overflow: 'auto',\r\n    },\r\n  },\r\n}));\r\n\r\nconst CalculatePrice = ({calculate, options}) => {\r\n    const classes = useStyles();\r\n    const [provider, setProvider] = useState('Promedio');\r\n    const [amount, setAmount] = useState('');\r\n    \r\n    const handleOptionChange = (event) => {\r\n        setProvider(event.target.value);\r\n    };\r\n\r\n    const handleAmountChange = (event) => {\r\n        if(isNaN(event.target.value)){\r\n            return\r\n        }\r\n        setAmount(event.target.value)\r\n    }\r\n\r\n    return(\r\n        <Grid container item>\r\n            <Grid container item xs={12}>\r\n                <Grid container item xs={12} sm={6} >  \r\n                    <FormControl className={classes.formControl}>\r\n                        <NativeSelect\r\n                          className={classes.selectEmpty}\r\n                          defaultValue='Promedio'\r\n                          name=\"Proveedor\"\r\n                          onChange={handleOptionChange}\r\n                          inputProps={{ 'aria-label': 'Proveedor' }}\r\n                        >\r\n                        {\r\n                            options.map((provider) => (\r\n                                <option value={provider} key={provider}>{provider}</option>\r\n                            ))\r\n                        }\r\n                        </NativeSelect>\r\n                        <FormHelperText>Proveedor</FormHelperText>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid container item xs={12} sm={6}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        placeholder=\"Cantidad\"\r\n                        value={amount}\r\n                        onChange={handleAmountChange}\r\n                        className={classes.textField}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container justify='center' item xs={9}> \r\n                <Typography variant='h6' className={classes.amount}>\r\n                    {calculate(provider,amount|| 0)}\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\nexport default CalculatePrice;","import { \r\n    Paper, \r\n    Grid, \r\n    Typography,\r\n    makeStyles, \r\n} from '@material-ui/core';\r\nimport { useContext } from 'react';\r\nimport AppContext from '../../AppContext'; \r\nimport { formatNumber } from '../Const';\r\nimport CalculatePrice from './CalculatePrice'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        marginTop: theme.spacing(4),\r\n        marginBottom: theme.spacing(4),\r\n    },\r\n}));\r\n\r\nconst Calculator = () => {\r\n    const classes = useStyles();\r\n    const { rows, data } = useContext(AppContext)\r\n    const options = {\r\n        Promedio: data.average\r\n    }\r\n\r\n    rows.forEach((provider) => {\r\n        options[provider.name] = provider.price\r\n    });\r\n\r\n    const fromDolarToVes = (selection, amount) => {\r\n        if(isNaN(amount)){\r\n            return 0; \r\n        }\r\n\r\n        return formatNumber((options[selection || 'Provider'] * amount));\r\n    };\r\n\r\n    const fromVesToDolar = (selection, amount) => {\r\n        if(isNaN(amount)){\r\n            return 0; \r\n        }\r\n\r\n        return formatNumber((amount / options[selection || 'Provider']),'USD');\r\n    };\r\n\r\n        //for now this will be the only option available\r\n        //i have planed a few more, like getting prices from a range of dates\r\n        //using my own API that still in development but with also be open source\r\n\r\n    return(\r\n        <Grid container justify='center'>  \r\n            <Grid item xs={12} sm={6} className={classes.container}>\r\n                <Typography variant='h6'>Dolares a Bolivares</Typography>\r\n                \r\n                <CalculatePrice\r\n                options={Object.keys(options)} \r\n                calculate={fromDolarToVes}/>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6} className={classes.container}>\r\n                <Typography variant='h6'>Bolivares a Dolares</Typography>\r\n\r\n                <CalculatePrice\r\n                optionObject={options}\r\n                options={Object.keys(options)}\r\n                calculate={fromVesToDolar}/>\r\n            </Grid>\r\n\r\n\r\n        </Grid>\r\n    );\r\n}\r\nexport default Calculator;"],"sourceRoot":""}