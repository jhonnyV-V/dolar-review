{"version":3,"sources":["services/externalApi.js","Components/Const.js","Components/Display/DisplayTable.jsx","Components/Display/Display.jsx"],"names":["externalApi","axios","create","baseURL","process","months","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","formatDate","date","splitDate","split","toLowerCase","formatter","Intl","NumberFormat","navigator","language","style","currency","formatNumber","number","isNaN","format","DisplayTable","rows","others","isSmallScreen","useMediaQuery","Grid","container","justify","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","scope","name","price","last_update","useStyles","makeStyles","theme","avegeragePaper","marginTop","spacing","marginBottom","tableContainer","Display","classes","useState","sources","data","setData","setRows","loadContent","a","get","quotes","forEach","source","index","push","id","quote","last_retrieved","sort","b","Date","console","log","useEffect","className","Typography","variant","average"],"mappings":"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","file":"static/js/4.7f3d8340.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst externalApi = axios.create({\r\n    baseURL: process.env.REACT_APP_EXTERNAL_API\r\n});\r\n\r\n\r\nexport default externalApi;\r\n","const months = {\r\n    jan: '01',\r\n    feb:'02',\r\n    mar:'03',\r\n    apr:'04',\r\n    may:'05',\r\n    jun:'06',\r\n    jul:'07',\r\n    aug:'08',\r\n    sep:'09',\r\n    oct:'10',\r\n    nov:'11',\r\n    dec:'12',\r\n}\r\n// take as an imput  the result of new Date() and returns a formated date\r\n// example: formatDate('Fri Mar 19 2021') and returns '2021/03/19'\r\nexport function formatDate(date){\r\n    let splitDate = `${date}`.split(' ')\r\n    let formatedDate = `${splitDate[3]}-${months[splitDate[1].toLowerCase()]}-${splitDate[2]}`\r\n    return formatedDate\r\n\r\n}\r\n//takes as input this three parameters as integers and return\r\n//the date in miliseconds from epox\r\nexport function getDate(year, month, day){\r\n    let date = Date.UTC(year,month -1, day +1)\r\n    return date\r\n}\r\n\r\nexport const getBrowserLocale = () => navigator.language || 'en-US';\r\nconst formatter =  new Intl.NumberFormat(getBrowserLocale(), { style: 'currency', currency: 'VES'})\r\n\r\nexport function formatNumber(number){\r\n    if(isNaN(number)){\r\n        return 0\r\n    }\r\n\r\n    return formatter.format(number)\r\n\r\n}\r\n","import { \r\n    Paper, \r\n    Grid,  \r\n    Table, \r\n    TableCell, \r\n    TableRow, \r\n    TableHead, \r\n    TableBody, \r\n    TableContainer,\r\n    useMediaQuery,\r\n} from '@material-ui/core';\r\nimport { formatNumber } from '../Const'\r\n\r\nconst DisplayTable = ({rows, ...others}) => {\r\n  const isSmallScreen = useMediaQuery('(max-width:669px)');\r\n\r\n  return(\r\n\r\n          <Grid container justify='center' {...others} >\r\n            <TableContainer component={Paper}>\r\n              <Table \r\n              size={isSmallScreen?'small': 'medium' } \r\n              aria-label=\"tabla de precios del dolar\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Proveedor</TableCell>\r\n                      <TableCell >Precio</TableCell>\r\n                      <TableCell >Ultima&nbsp;Actualizaci√≥n</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                <TableBody>\r\n                  {rows.map((row) => (\r\n                    <TableRow key={row.name}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {row.name}\r\n                      </TableCell>\r\n                      <TableCell >{formatNumber(row.price)}</TableCell>\r\n                      <TableCell >{row.last_update}</TableCell>\r\n                    </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n    )\r\n\r\n}\r\nexport default DisplayTable","import { \r\n    Paper, \r\n    Grid, \r\n    Typography,\r\n    makeStyles, \r\n} from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\nimport externalApi from '../../services/externalApi';\r\nimport { formatDate, formatNumber } from '../Const';\r\nimport DisplayTable from './DisplayTable';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    avegeragePaper: {\r\n        marginTop: theme.spacing(4),\r\n        marginBottom: theme.spacing(4),\r\n    },\r\n    tableContainer:{\r\n      marginBottom: theme.spacing(4),  \r\n    },\r\n}));\r\n\r\nfunction Display() {\r\n    const classes = useStyles();\r\n    const [data, setData] = useState({sources:[]});\r\n    const [rows, setRows] = useState([]);\r\n\r\n    const loadContent = async () => {\r\n        const quotes = await externalApi.get();\r\n        setData(quotes.data);\r\n        let row = []\r\n        quotes.data.sources.forEach((source, index) =>{\r\n            row.push({\r\n                id: index,\r\n                name: source.name,\r\n                price: source.quote,\r\n                last_update: source.last_retrieved\r\n            });\r\n        });\r\n        row.sort((a,b) => new Date(b.last_update) - new Date(a.last_update) )\r\n        setRows(row)\r\n        console.log(quotes.data);\r\n    };\r\n    useEffect(() => {\r\n        //the API is not mine, if you want to check the source is\r\n        //https://api.exchangedyn.com/free/quotes/usdves\r\n        loadContent();\r\n    }, [])\r\n\r\n        //for now this will be the only option available\r\n        //i have planed a few more, like getting prices from a range of dates\r\n        //using my own API that still in development but with also be open source\r\n\r\n    return(\r\n        <>\r\n            <Paper className={classes.avegeragePaper}>\r\n                <Grid container justify='center'>\r\n                    <Grid container justify='center'>\r\n                        <Typography\r\n                        variant='h5'>\r\n                            Fecha: {formatDate(new Date(rows[0]?.last_update))}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid container justify='center'>\r\n                        <Typography\r\n                        variant='h5'>\r\n                            Promedio: {formatNumber(data.average)}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <DisplayTable rows={rows} className={classes.tableContainer} />\r\n        </>\r\n    );\r\n}\r\nexport default Display;"],"sourceRoot":""}