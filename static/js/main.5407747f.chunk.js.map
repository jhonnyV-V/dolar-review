{"version":3,"sources":["services/externalApi.js","Components/Const.js","Components/Display.jsx","Components/Header.jsx","App.jsx","index.js"],"names":["externalApi","axios","create","baseURL","process","months","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","formatDate","date","splitDate","split","toLowerCase","formatNumber","number","isNaN","formatedNumber","Number","toLocaleString","splitNumber","replace","join","useStyles","makeStyles","theme","dataGrid","height","width","avegeragePaper","marginTop","spacing","marginBottom","Display","classes","useState","sources","data","setData","rows","setRows","isSmallScreen","useMediaQuery","loadContent","a","get","quotes","row","forEach","source","index","push","id","name","price","quote","last_update","last_retrieved","console","log","useEffect","Paper","className","Grid","container","justify","Typography","variant","Date","average","TableContainer","component","Table","table","size","aria-label","TableHead","TableRow","TableCell","TableBody","map","scope","root","flexGrow","menuButton","marginRight","title","color","ButtonAppBar","AppBar","position","Toolbar","padding","App","Container","createMuiTheme","palette","type","primary","main","secondary","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.5407747f.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst externalApi = axios.create({\r\n    baseURL: process.env.REACT_APP_EXTERNAL_API\r\n});\r\n\r\n\r\nexport default externalApi;\r\n","const months = {\r\n    jan: '01',\r\n    feb:'02',\r\n    mar:'03',\r\n    apr:'04',\r\n    may:'05',\r\n    jun:'06',\r\n    jul:'07',\r\n    aug:'08',\r\n    sep:'09',\r\n    oct:'10',\r\n    nov:'11',\r\n    dec:'12',\r\n}\r\n// take as an imput  the result of new Date() and returns a formated date\r\n// example: formatDate('Fri Mar 19 2021') and returns '2021/03/19'\r\nexport function formatDate(date){\r\n    let splitDate = `${date}`.split(' ')\r\n    let formatedDate = `${splitDate[3]}-${months[splitDate[1].toLowerCase()]}-${splitDate[2]}`\r\n    return formatedDate\r\n\r\n}\r\n//takes as input this three parameters as integers and return\r\n//the date in miliseconds from epox\r\nexport function getDate(year, month, day){\r\n    let date = Date.UTC(year,month -1, day +1)\r\n    return date\r\n}\r\n\r\nexport function formatNumber(number){\r\n    if(isNaN(number)){\r\n        return 0\r\n    }\r\n    let formatedNumber = Number(number).toLocaleString('en-US')\r\n    let splitNumber = formatedNumber.split('.')\r\n    splitNumber[0] = splitNumber[0].replace(',','.')\r\n    formatedNumber = splitNumber.join(',')\r\n    return formatedNumber\r\n}\r\n\r\nexport const colors = {\r\n    \"DolarToday\":'#ff0000',\r\n    \"AirTM (Sell)\":\"#FF22aa\",\r\n    \"AirTM (Market)\":\"#aa95FF\",\r\n    \"AirTM (Buy)\":\"#22ff99\",\r\n    \"AKBFintech (Recommended)\":\"#0000ff\",\r\n    \"AKBFintech (Original)\":\"#ffff00\"\r\n}\r\n","import React from 'react';\r\nimport { \r\n    Paper, \r\n    Grid, \r\n    Typography, \r\n    Table, \r\n    TableCell, \r\n    TableRow, \r\n    TableHead, \r\n    TableBody, \r\n    TableContainer,\r\n    useMediaQuery,\r\n    makeStyles, \r\n} from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\nimport externalApi from '../services/externalApi'\r\nimport { formatDate, formatNumber } from './Const'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    dataGrid:{\r\n        height: 300,\r\n        width: '100%',\r\n    },\r\n    avegeragePaper: {\r\n        marginTop: theme.spacing(4),\r\n        marginBottom: theme.spacing(4),\r\n    },\r\n}));\r\n\r\nfunction Display() {\r\n    const classes = useStyles();\r\n    const [data, setData] = useState({sources:[]});\r\n    const [rows, setRows] = useState([]);\r\n    const isSmallScreen = useMediaQuery('(max-width:669px)');\r\n\r\n    const loadContent = async () => {\r\n        const quotes = await externalApi.get();\r\n        setData(quotes.data);\r\n        let row = []\r\n        quotes.data.sources.forEach((source, index) =>{\r\n            row.push({\r\n                id: index,\r\n                name: source.name,\r\n                price: source.quote,\r\n                last_update: source.last_retrieved\r\n            });\r\n        });\r\n        setRows(row)\r\n        console.log(quotes.data);\r\n    };\r\n    useEffect(() => {\r\n        //the API is not mine, if you want to check the source is\r\n        //https://api.exchangedyn.com/free/quotes/usdves\r\n        loadContent();\r\n    }, [])\r\n\r\n        //for now this will be the only option available\r\n        //i have planed a few more, like getting prices from a range of dates\r\n        //using my own API that still in development but with also be open source\r\n\r\n    return(\r\n        <>\r\n            <Paper className={classes.avegeragePaper}>\r\n                <Grid container justify='center'>\r\n                    <Grid container justify='center'>\r\n                        <Typography\r\n                        variant='h5'>\r\n                            Fecha: {formatDate(Date())}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid container justify='center'>\r\n                        <Typography\r\n                        variant='h5'>\r\n                            Promedio: {formatNumber(data.average)}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <Grid container justify='center'>\r\n                <TableContainer component={Paper}>\r\n                  <Table className={classes.table} \r\n                  size={isSmallScreen?'small': 'medium' } \r\n                  aria-label=\"tabla de precios del dolar\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell>Proveedor</TableCell>\r\n                        <TableCell >Precio</TableCell>\r\n                        <TableCell >Ultima&nbsp;Actualizaci√≥n</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {rows.map((row) => (\r\n                        <TableRow key={row.name}>\r\n                          <TableCell component=\"th\" scope=\"row\">\r\n                            {row.name}\r\n                          </TableCell>\r\n                          <TableCell >{formatNumber(row.price)}</TableCell>\r\n                          <TableCell >{row.last_update}</TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\nexport default Display;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width:'100vw',\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        color:'#28a745',\r\n},\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n    <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title} >\r\n                    DolarReview\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Display from './Components/Display'\r\nimport Header from './Components/Header'\r\nimport { Container } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport './App.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    padding: 50,\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles()\r\n  return (\r\n    <div>\r\n      <Header/>\r\n      <div className={classes.root}>\r\n        <Container>\r\n          <Display/>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.jsx';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { CssBaseline } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type:'dark',\r\n        primary: {\r\n            main:\"#1c1c1c\"\r\n        },\r\n        secondary:{\r\n            main:\"#fff\"\r\n        },\r\n    },\r\n})\r\n\r\nReactDOM.render(<ThemeProvider theme={theme} >\r\n                    <CssBaseline/>\r\n                    <App/>\r\n                </ThemeProvider> , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}